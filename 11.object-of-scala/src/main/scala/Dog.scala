// オブジェクトは型としての性質も持つ
// クラスのインスタンス化の代わりとして、オブジェクトを使うこともできる
class Dog(private val name: String) {
  def greet(): Unit = println(s"${name}だわん")
}

object Taro extends Dog("太郎")

// オブジェクトは、 ファクトリメソッドを作るのにも用いられる
// ファクトリメソッドとは、クラスのインスタンスを生成するメソッドのこと
// Scalaのオブジェクトの中で、applyというメソッドを定義すると、そのメソッドは特別扱いされ、オブジェクト名（applyメソッドの引数）の形式で呼び出すことが可能
// そのため、クラスと同じ名前のオブジェクトを用意し、そこにファクトリメソッドとしてapplyメソッドを用意する

// Scalaのクラスはプライマリーコンストラクタというコンストラクタ1つしか持てない
// そのため、プライマリーコンストラクタと違う方法でインスタンスを作成したい場合には、このようにファクトリメソッドを利用する

// このようなクラスと同名のオブジェクトを「コンパニオンオブジェクト」という / companion ある行動を共にし親密な関係にある仲間・友
// コンパニオンオブジェクトは、同名クラスのプライベートメンバーにもアクセスが可能となる
// そのため、コンパニオンオブジェクトには、外部クラスよりもクラスに結合した処理を記述することができる
object Dog {
  def apply(name: String) = new Dog(name)
  def apply(id: Int) = new Dog(s"番号付き犬$id")

  // コンパニオンオブジェクトは、Dogクラスのプライベートなフィールド(dog.name)にアクセスできる
  def printName(dog: Dog): Unit = println(dog.name)
}

// まとめ
// Scala の object キーワードはオブジェクトを作る方法の一つ
// オブジェクトはグローバルにどこからでもアクセスすることができる
// オブジェクトは、トレイトをミックスインしたり、クラスを継承することができる
// オブジェクトは、ファクトリメソッドを作るのに便利
// コンパニオンオブジェクトはクラスのプライベートメンバーを利用できる
